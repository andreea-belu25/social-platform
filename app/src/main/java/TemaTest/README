**README**

 Fisiere utilizate:
    -> users.csv in care retin informatiile despre utilizatori
    -> comments.csv in care retin informatiile despre comentariile facute
    -> posts.csv in care retin informatiile despre postarile facute
    La fiecare dintre cele 3 fisiere informatiile sunt reprezentate de atributele unui utilizator, unei postari sau unui comentariu definite in clasele specifice.

 Interfata Likeable: definirea functilor comune din clasele Comentariu si Postare

 Clase:
    -> CSVFileActions. java:
        Actiuni realizate: scrierea in fisier, formarea vectorilor de users, posts si comments si de asemenea, printarea acestora in fisierele specifice.

    -> App. java:
        Tratarea celor 2 cazuri speciale (strings == null sau lungimea sa este 0)
        Intrucat orice actiune a unui utilizator poate fi facuta doar daca acesta este autentificat => realizez aceasta verificare inainte de executia oricarei comenzi.
        Inainte de executia oricarei comenzi, trebuie sa fie executat cleanup-all, adica stergerea datelor din cele 3 fisiere cu care lucrez.
        Executia fiecarei comenzi presupune apelarea metodei respective din clasa specifica si actualizarea fisierelor cu modificarile realizate.

    -> Utilizator.java:
        In aceasta clasa am scris toate comenzile specifice utilizatorului (pe care le poate executa un utilizator), avand grija sa adauga sau sa sterg din vectorul de users acolo
      unde este cazul.
        Pentru majoritatea functiilor m-am ajutat de metode auxiliare pentru a verifica diferite cazuri, acestea fiind scrise la inceputul clasei.
        Pentru functiile in care trebuie sa fac afisarea, am tratat ultimul element la final (valabil si pentru restul claselor), intrucat aici trebuiau puse si acoladele finale
      ale string-ului pe care il afisez.
        Pentru functiile in care se cere ordonarea dupa data m-am folosit de un vector in care pun datele ce se doresc sortate si le sortez prin apelul unei functii ce mi le va ordona
      dupa data (analog, la alte functii de acest tip din restul claselor).
        Vectorul de aparitii pentru functiile in care l-am folosit ma ajuta sa fac ordonarea si afisarea datelor dupa un criteriu dat, prin parcurgerea si determinarea celor 5 utilizatori
      sau a lungimii vectorului (daca nu exista 5 utilizatori in vector).

	-> Comentariu.java si Postare.java:
        Ca si in clasa Utilizator, in aceste doua clase sunt scrise toate functiile specifice unui comentariu, respectiv ale unei postari. Logica aplicata pentru comenzilor din
      aceste clase sunt asemantoare cu cea descrisa pentru clasa Utilizator.
        Data unui comentariu sau a unei postari este generata prin aceeasi metoda ca cea folosita in checker.
        Pentru fiecare dintre cele doua clase am creat o functie separata de comparare pentru ordonarea postarilor si a comentarilor dupa un criteriu dat (aceste sortari sunt
      pastrate in vectori auxiliari pentru a nu modifica datele initiale ale vectorilor de postari/ comentarii).

 Bonus:
    Ce alte cazuri limită ați mai trata în această aplicație?

        Conform implementarii mele, am observat urmatoarele cazuri:
          1. La fct getMostCommentedPosts: tratarea cazului particular in care nicio postare de pe platforma nu a fost comentata;
          2. Analog pentru getMostLikedPosts;
          Primele doua cazuri sunt mai mult pentru genul de platforma care este la inceputul lansarii, nefiind popularizata.
          3. Posibilitatea unui utilizator de a-si da follow singur;
          4. Daca cazul de sus este posibil => avem si posibilitatea unui utilizator de a-si da unfollow singur.

    Cum ați refactoriza comenzile și răspunsurile din aplicație?

       Alte feature-uri posibile ale platformei:
          1. Posibilitatea unui utilizator de a-si face anumite postari private. (ex. sa fie vizibile doar pentru anumiti prieteni);
          2. Posibilitatea unui utilizator de a-si face propria lista de prieteni privata;
          3. Posibilitatea unui utilizator de a-si arhiva postarile pe care nu le mai vrea publice, dar nici sterse;
          4. Posibilitatea unui utilizator de a raporta comentariile pe care le considera ofensatoare (cu continut neadecvat, jignitor);
          5. Posibilitatea unui utilizator de a redistribui/ salva anumite postari ale altor utilizatori pe care le considera importante. (ex. un elev de clasa a doisprezecea
    vrea sa salveze postarea in care se ofera detalii importante pentru admiterea facultatii pe care vrea sa o urmeze);
          6. Posibilitatea unui utilizator care a facut comentariu unei postari si a primit raspuns, sa comenteze inapoi la raspunsul primit (reply).